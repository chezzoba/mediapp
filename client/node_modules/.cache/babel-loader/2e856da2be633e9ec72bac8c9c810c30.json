{"ast":null,"code":"import axios from 'axios';\nimport { setAlert } from './alert';\nimport { REGISTER_SUCCESS, REGISTER_FAIL, USER_LOADED, AUTH_ERROR } from './types';\nimport setAuthToken from '../utils/setauthtoken';\nexport const loadUser = () => async dispatch => {\n  if (localStorage.token) {\n    setAuthToken(localStorage.token);\n  }\n\n  try {\n    const res = await axios.get('/api/auth');\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data\n    });\n  } catch (err) {\n    console.error(err.msg);\n    dispatch({\n      type: AUTH_ERROR\n    });\n  }\n};\nexport const register = ({\n  name,\n  email,\n  password\n}) => async dispatch => {\n  const config = {\n    headers: {\n      \"Content-Type\": 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    name,\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post('/api/users', body, config);\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data\n    });\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(er => dispatch(setAlert(er.msg, 'danger')));\n    }\n\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  }\n};","map":{"version":3,"sources":["/home/kaizadwadia0/MERNCourse/client/src/actions/auth.js"],"names":["axios","setAlert","REGISTER_SUCCESS","REGISTER_FAIL","USER_LOADED","AUTH_ERROR","setAuthToken","loadUser","dispatch","localStorage","token","res","get","type","payload","data","err","console","error","msg","register","name","email","password","config","headers","body","JSON","stringify","post","errors","response","forEach","er"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,SAAzB;AACA,SACIC,gBADJ,EAEIC,aAFJ,EAGIC,WAHJ,EAIIC,UAJJ,QAKO,SALP;AAMA,OAAOC,YAAP,MAAyB,uBAAzB;AAEA,OAAO,MAAMC,QAAQ,GAAG,MAAM,MAAMC,QAAN,IAAkB;AAC5C,MAAIC,YAAY,CAACC,KAAjB,EAAwB;AACpBJ,IAAAA,YAAY,CAACG,YAAY,CAACC,KAAd,CAAZ;AACH;;AACD,MAAI;AACA,UAAMC,GAAG,GAAG,MAAMX,KAAK,CAACY,GAAN,CAAU,WAAV,CAAlB;AACAJ,IAAAA,QAAQ,CAAC;AAACK,MAAAA,IAAI,EAAET,WAAP;AAAoBU,MAAAA,OAAO,EAAEH,GAAG,CAACI;AAAjC,KAAD,CAAR;AACH,GAHD,CAGE,OAAOC,GAAP,EAAY;AACVC,IAAAA,OAAO,CAACC,KAAR,CAAcF,GAAG,CAACG,GAAlB;AACAX,IAAAA,QAAQ,CAAC;AAACK,MAAAA,IAAI,EAAER;AAAP,KAAD,CAAR;AACH;AACJ,CAXM;AAaP,OAAO,MAAMe,QAAQ,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,KAAR;AAAeC,EAAAA;AAAf,CAAD,KAA+B,MAAMf,QAAN,IAAkB;AACrE,QAAMgB,MAAM,GAAG;AAACC,IAAAA,OAAO,EAAE;AAAC,sBAAgB;AAAjB;AAAV,GAAf;AACA,QAAMC,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAe;AAAEP,IAAAA,IAAF;AAAQC,IAAAA,KAAR;AAAeC,IAAAA;AAAf,GAAf,CAAb;;AAEA,MAAI;AACA,UAAMZ,GAAG,GAAG,MAAMX,KAAK,CAAC6B,IAAN,CAAW,YAAX,EAAyBH,IAAzB,EAA+BF,MAA/B,CAAlB;AACAhB,IAAAA,QAAQ,CAAC;AAACK,MAAAA,IAAI,EAAEX,gBAAP;AAAyBY,MAAAA,OAAO,EAAEH,GAAG,CAACI;AAAtC,KAAD,CAAR;AACH,GAHD,CAGE,OAAOC,GAAP,EAAY;AACV,UAAMc,MAAM,GAAGd,GAAG,CAACe,QAAJ,CAAahB,IAAb,CAAkBe,MAAjC;;AACA,QAAIA,MAAJ,EAAY;AACRA,MAAAA,MAAM,CAACE,OAAP,CAAeC,EAAE,IAAIzB,QAAQ,CAACP,QAAQ,CAACgC,EAAE,CAACd,GAAJ,EAAS,QAAT,CAAT,CAA7B;AACH;;AACDX,IAAAA,QAAQ,CAAC;AAACK,MAAAA,IAAI,EAAEV;AAAP,KAAD,CAAR;AACH;AACJ,CAdM","sourcesContent":["import axios from 'axios';\nimport { setAlert } from './alert';\nimport {\n    REGISTER_SUCCESS, \n    REGISTER_FAIL, \n    USER_LOADED, \n    AUTH_ERROR\n} from './types';\nimport setAuthToken from '../utils/setauthtoken';\n\nexport const loadUser = () => async dispatch => {\n    if (localStorage.token) {\n        setAuthToken(localStorage.token);\n    }\n    try {\n        const res = await axios.get('/api/auth');\n        dispatch({type: USER_LOADED, payload: res.data});\n    } catch (err) {\n        console.error(err.msg);\n        dispatch({type: AUTH_ERROR})\n    }\n}\n\nexport const register = ({ name, email, password }) => async dispatch => {\n    const config = {headers: {\"Content-Type\": 'application/json'}};\n    const body = JSON.stringify({ name, email, password });\n\n    try {\n        const res = await axios.post('/api/users', body, config);\n        dispatch({type: REGISTER_SUCCESS, payload: res.data});\n    } catch (err) {\n        const errors = err.response.data.errors;\n        if (errors) {\n            errors.forEach(er => dispatch(setAlert(er.msg, 'danger')));\n        }\n        dispatch({type: REGISTER_FAIL});\n    }\n}"]},"metadata":{},"sourceType":"module"}